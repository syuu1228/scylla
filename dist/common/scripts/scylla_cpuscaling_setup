#!/usr/bin/python2
#
# Copyright 2018 ScyllaDB
#

#
# This file is part of Scylla.
#
# Scylla is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Scylla is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Scylla.  If not, see <http://www.gnu.org/licenses/>.

import os
import logging
from scylla_util import is_debian_variant, is_gentoo_variant, is_redhat_variant, is_systemd

if __name__ == '__main__':
    if os.getuid() > 0:
        logger.error('Requires root permission.')
        sys.exit(1)
    if not os.path.exists('/sys/devices/system/cpu/cpufreq/policy0/scaling_governor'):
        logging.error('This computer doesn\'t supported CPU scaling configuration.')
        sys.exit(0)
    if is_debian_variant():
        subprocess.check_call(['apt-get', 'install', '-y', 'cpufrequtils'])
        subprocess.check_call(['service', 'cpufrequtils', 'stop'])
        f = open('/etc/default/cpufrequtils', 'w')
        f.write('GOVERNOR='performance'\n')
        f.close()
        if is_systemd():
            subprocess.check_call(['systemctl', 'enable', 'cpufrequtils.service'])
        subprocess.check_call(['service', 'cpufrequtils', 'start'])
    if is_gentoo_variant():
        subprocess.check_call(['emerge', '-uq', 'sys-power/cpupower'])
        f = open('/etc/conf.d/cpupower')
        cur = f.read()
        f.close()
        new = re.sub(r'--governor ondemand', '--governor performance', cur, flags=re.MULTILINE)
        f = open('/etc/conf.d/cpupower')
        f.write(new)
        f.close()
        if is_systemd():
            subprocess.check_call(['systemctl', 'enable', 'cpupower-frequency-set.service'])
            subprocess.check_call(['systemctl', 'start', 'cpupower-frequency-set.service'])
        else:
            subprocess.check_call(['rc-update', 'add', 'cpupower', 'default'])
            subprocess.check_call(['rc-service', 'cpupower', 'start'])
    if is_redhat_variant():
        subprocess.call(['yum', 'install', '-y', 'cpupowerutils'])
        f = open('/etc/sysconfig/cpupower')
        f.write('''
CPUPOWER_START_OPTS="frequency-set -g performance"
CPUPOWER_STOP_OPTS="frequency-set -g ondemand"
        '''.strip())
        f.close()
        p = subprocess.Popen(['systemctl', 'is-active', 'cpupower.service'], stdout=subprocess.PIPE)
        is_active = p.communicate()[0]
        if re.match(r'^active', str, flags=re.MULTILINE):
            subprocess.check_call(['systemctl', 'stop', 'cpupower.service'])
        subprocess.check_call(['systemctl', 'enable', 'cpupower.service'])
        subprocess.check_call(['systemctl', 'start', 'cpupower.service'])
